package adventofcode.aoc2024.day10;

import java.util.ArrayList;
import java.util.List;

/**
 * https://adventofcode.com/2024/day/10
 */
public class Main {


    public static void main(String[] args) {
        String s =
                "8980123016789892101689654329890101234676\n" +
                        "7878034525430783098798710018765210965589\n" +
                        "0169019630121654101607629897654349876439\n" +
                        "1252108749236543212512534785456438732128\n" +
                        "0343219658747865103403445674307623642017\n" +
                        "4304378767656974234765430543218914551006\n" +
                        "3210478010234983165891021657801806562345\n" +
                        "4981569320105072074322780786918987078967\n" +
                        "5672389437656101289013691095107876121258\n" +
                        "8765476598587292993234542384212345430349\n" +
                        "9651062303494387870105033473021058965432\n" +
                        "2342321212345676543276124562198769873451\n" +
                        "1103430907658789010189210890345678012360\n" +
                        "0234567898349654123678001701239987109876\n" +
                        "4321098701234563234567115654378103210987\n" +
                        "5696545670123654098943278521269210349567\n" +
                        "6787430987098743107654569430354321058438\n" +
                        "5612321078123812234543210348741034567629\n" +
                        "2500110569014901225621001259612987859210\n" +
                        "1043223489905430310734308766503456988765\n" +
                        "2158965676876129429865219823439567873450\n" +
                        "3067834385987098510556923219878710564321\n" +
                        "4786321294306787623457812308701601450654\n" +
                        "5695410105217896501569908455612532321703\n" +
                        "6787801234326903432678789964103445499812\n" +
                        "5108943105695212765410654873213456781210\n" +
                        "0237652098784303890321303898102387670349\n" +
                        "1247891034510789081010212743201098581458\n" +
                        "0356780123623692132321301650120123498767\n" +
                        "9456692101704543545410456788761212329450\n" +
                        "8767543289813032106998743899654300210321\n" +
                        "7898654176522123677867012101076541101765\n" +
                        "6765467087437054789851231032987432217894\n" +
                        "5410308292348965670340342347878924300123\n" +
                        "4323219101437434981230659456569015423232\n" +
                        "1098565456546321876521768765433456714981\n" +
                        "2787672347435430101419859874322347805670\n" +
                        "3690181678921015612301348123011098945668\n" +
                        "4521090589011056787652210023452787434789\n" +
                        "5432183432102345898543101110567898543210\n";


        String[] ss = s.split("\n");
        int[][] mat = new int[ss.length][ss.length];

        for (int i = 0; i < ss.length; i++) {
            for (int j = 0; j < ss[0].length(); j++) {
                mat[i][j] = Integer.parseInt(ss[i].substring(j, j + 1));
            }
        }

        int score = 0;
        System.out.println("here");
        List<Node> startingNodes = new ArrayList<>();
        for (int i = 0; i < ss.length; i++) {
            for (int j = 0; j < ss.length; j++) {
                if (mat[i][j] == 0) {
                    startingNodes.add(new Node(i, j));
                }
            }
        }
        int z = 0;
        for (Node node : startingNodes) {
            int[][] mat2 = new int[mat.length][mat.length];
            int b = dfs(node.i, node.j, 0, mat, mat2);
            int c = 0;
            for (int i = 0; i < ss.length; i++) {
                for (int j = 0; j < ss.length; j++) {
                    if (mat2[i][j] > 0 && mat[i][j] == 9) {
                        c++;
                    }
                }
            }
            System.out.println(c);
            score += c;
        }


        System.out.println(score);
    }

    private static int dfs(int i, int j, int v, int[][] mat, int[][] mat2) {
        if (v > 9 || i < 0 || j < 0 || i == mat.length || j == mat.length) {
            return 0;
        }

//        if (mat2[i][j] > 2) {
//            return 0;
//        }
        if (v != mat[i][j]) {
            return 0;
        }
        mat2[i][j]++;
        if (v == 9 && mat[i][j] == 9) {
            return 1;
        }
        return dfs(i + 1, j, v + 1, mat, mat2) + dfs(i, j + 1, v + 1, mat, mat2) +
                dfs(i - 1, j, v + 1, mat, mat2) + dfs(i, j - 1, v + 1, mat, mat2);
    }

    static class Node {
        int i;
        int j;

        public Node(int i, int j) {
            this.i = i;
            this.j = j;
        }

        public int getI() {
            return i;
        }

        public void setI(int i) {
            this.i = i;
        }

        public int getJ() {
            return j;
        }

        public void setJ(int j) {
            this.j = j;
        }
    }


}
